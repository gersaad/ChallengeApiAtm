// <auto-generated />
using System;
using ChallengeApiAtm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChallengeApiAtm.Migrations
{
    [DbContext(typeof(AtmDbContext))]
    [Migration("20241004123958_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChallengeApiAtm.Modelos.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UltimaExtraccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("ChallengeApiAtm.Modelos.Operacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CuentaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.ToTable("Operaciones");
                });

            modelBuilder.Entity("ChallengeApiAtm.Modelos.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CuentaId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId")
                        .IsUnique();

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("ChallengeApiAtm.Modelos.TarjetaCredencial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Bloqueada")
                        .HasColumnType("bit");

                    b.Property<int>("IntentosFallidos")
                        .HasColumnType("int");

                    b.Property<string>("PinHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TarjetaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TarjetaId")
                        .IsUnique();

                    b.ToTable("TarjetaCredenciales");
                });

            modelBuilder.Entity("ChallengeApiAtm.Modelos.Operacion", b =>
                {
                    b.HasOne("ChallengeApiAtm.Modelos.Cuenta", "Cuenta")
                        .WithMany("Operaciones")
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("ChallengeApiAtm.Modelos.Tarjeta", b =>
                {
                    b.HasOne("ChallengeApiAtm.Modelos.Cuenta", "Cuenta")
                        .WithOne("Tarjeta")
                        .HasForeignKey("ChallengeApiAtm.Modelos.Tarjeta", "CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("ChallengeApiAtm.Modelos.TarjetaCredencial", b =>
                {
                    b.HasOne("ChallengeApiAtm.Modelos.Tarjeta", "Tarjeta")
                        .WithOne("TarjetaCredencial")
                        .HasForeignKey("ChallengeApiAtm.Modelos.TarjetaCredencial", "TarjetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("ChallengeApiAtm.Modelos.Cuenta", b =>
                {
                    b.Navigation("Operaciones");

                    b.Navigation("Tarjeta")
                        .IsRequired();
                });

            modelBuilder.Entity("ChallengeApiAtm.Modelos.Tarjeta", b =>
                {
                    b.Navigation("TarjetaCredencial")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
